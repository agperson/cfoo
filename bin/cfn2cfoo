#!/usr/bin/env ruby
# This script provides a reasonable if simplistic conversion of standard
# CloudFormation JSON templates into cfoo YAML grammar.

require 'json'
require 'yaml'
require 'stringio'

if ARGV.include? "--help" or ARGV.first.nil?
    STDERR.puts "Usage: #{File.basename $0} [filename]"
    STDERR.puts "Convert a CloudFormation JSON template to cfoo YAML grammar."
    exit 1
else
  filename = ARGV.first
end

begin
  s = JSON.load(File.new(filename))
rescue
  STDERR.puts "Error: Unable to load and parse input file: #{filename}"
  exit 1
end

class Base64Type < String
  def to_yaml_type
    "!Base64"
  end

  def encode_with coder
    coder.scalar(to_yaml_type, self)
  end
end

YAML::add_domain_type("", "Base64Type")

def convert(obj)
  if obj.is_a?(Hash)
    obj.each do |k, v|
      if k == "Ref"
        return "$(#{v})"
      elsif k == "Fn::Base64"
        return Base64Type.new(convert(v))
      elsif k == "Fn::Join"
        return v[1].map { |i| convert(i) }.join(v[0])
      elsif k == "Fn::GetAtt"
        return "$(#{v[0]}[#{convert(v[1])}])"
      elsif k == "Fn::FindInMap"
        return "$(#{v[0]}[#{convert(v[1])}][#{convert(v[2])}])"
      elsif v.is_a?(Enumerable)
        obj[k] = convert(v)
      else
        v
      end
    end
  elsif obj.is_a?(Array)
    obj.each_index do |i|
      if obj[i].is_a?(Enumerable)
        obj[i] = convert(obj[i])
      else
        obj[i]
      end
    end
  else
    # Escape any unescaped pass-through variables (i.e. in UserData scripts)
    return obj.gsub(/\$/, '\$')
  end
end

puts convert(s).to_yaml
